set (Boost_USE_STATIC_LIBS ON)
set(Boost_USE_MULTITHREADED ON)
set(Boost_DETAILED_FAILURE_MSG ON)

if (UNIX)
	set(BoostRootDir "/opt/boost/boost_1_67_0")
	set(BoostLibraryName "gcc7.3.1-x64")
	set(BOOST_INCLUDEDIR ${BoostRootDir}/include)
	set(BOOST_LIBRARYDIR ${BoostRootDir}/${BoostLibraryName}/lib)
else (UNIX)
	if(DEFINED ENV{OVERRIDE_BOOSTROOTDIR})
		message(STATUS "FOUND OVERRIDE_BOOSTROOTDIR")
		set(BOOST_INCLUDEDIR $ENV{OVERRIDE_BOOSTROOTDIR}/include)
		set(BOOST_LIBRARYDIR $ENV{OVERRIDE_BOOSTROOTDIR}/$ENV{BoostLibraryName}/lib)
	else()
		message(STATUS "DID NOT FIND OVERRIDE_BOOSTROOTDIR")
		set(BOOST_INCLUDEDIR $ENV{BoostRootDir}/include)
		set(BOOST_LIBRARYDIR $ENV{BoostRootDir}/$ENV{BoostLibraryName}/lib)
	endif()
endif(UNIX)

message(STATUS "BOOST_INCLUDEDIR : " ${BOOST_INCLUDEDIR})
message(STATUS "BOOST_LIBRARYDIR : " ${BOOST_LIBRARYDIR})
find_package(Boost 1.67.0 EXACT COMPONENTS unit_test_framework REQUIRED)

include_directories("../FakeIt/single_header/boost/")
include_directories("../SimpleMockExample")

set(requiredTestLibs Boost::unit_test_framework)
add_tests_in_folder( *.cpp ${requiredTestLibs})
